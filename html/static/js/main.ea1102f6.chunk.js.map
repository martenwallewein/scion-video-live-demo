{"version":3,"sources":["VideoPlayer.js","ScionHeader.js","App.js","serviceWorker.js","index.js"],"names":["VideoJSPlayer","props","videoNode","useRef","videoJsOptions","autoplay","controls","responsive","fill","aspectRatio","useEffect","current","window","videojs","default","newPlayer","console","log","dispose","source","style","width","className","data-vjs-player","ref","src","type","ScionHeader","useState","stats","setStats","setTimeout","axios","get","then","res","data","setInterval","local","remote","path","sources","label","App","selectedSource","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qRA2CeA,EAvCO,SAACC,GACnB,IAAMC,EAAYC,iBAAO,MAEnBC,EAAiB,CACnBC,UAAU,EACVC,UAAU,EACVC,YAAY,EACZC,MAAM,EACNC,YAAa,QAiBjB,OAdAC,qBAAU,WAEN,GAAKR,EAAUS,QAAf,CAIAC,OAAOC,QAAUA,IAAQC,QACzB,IAAMC,EAAYF,YAAQX,EAAUS,QAASP,GAAgB,WACzDY,QAAQC,IAAI,mBAGhB,OAAO,kBAAMF,EAAUG,cACxB,CAACjB,EAAMkB,SAGF,uBAAKC,MAAO,CAACC,MAAO,SAChB,uBAAKC,UAAU,eACX,uBAAKC,mBAAA,GACD,yBAAOC,IAAKtB,EACRoB,UAAS,kCACD,0BAAQG,IAAKxB,EAAMkB,OAAOM,IAAKC,KAAMzB,EAAMkB,OAAOO,Y,iBCjCzEC,EAAc,SAAC1B,GAAW,IAAD,EAER2B,qBAFQ,mBAE3BC,EAF2B,KAEpBC,EAFoB,KAalC,OATApB,qBAAU,WACNqB,YAAW,kBAAMC,IAAMC,IAAI,+BAA+BC,MAAK,SAAAC,GAAG,OAAIL,EAASK,EAAIC,WAAQ,KAC3FC,aAAY,WACRL,IAAMC,IAAI,+BAA+BC,MAAK,SAAAC,GAAG,OAAIL,EAASK,EAAIC,WACnE,OACJ,CAACnC,EAAMkB,SAEVH,QAAQC,IAAIY,GAGR,6BACI,kDACA,6BAEIA,EAAQ,CACJ,oDAA0BA,EAAMS,OAChC,mDAAyBT,EAAMU,QAC/B,8CAAoBV,EAAMW,OAC1B,4CCnBdC,EAAU,CAAC,CACfhB,IAAK,mCACLC,KAAM,aACNgB,MAAO,OAeMC,MAZf,WAAgB,IAAD,EAE+Bf,mBAASa,EAAQ,IAFhD,mBAENG,EAFM,KAIb,OAJa,KAKX,yBAAKtB,UAAU,OACb,kBAAC,EAAD,CAAaH,OAAQyB,IACrB,kBAAC,EAAD,CAAezB,OAAQyB,MCNTC,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.ea1102f6.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {useEffect, useRef} from \"react\";\nimport videojs from \"video.js\";\n\nconst VideoJSPlayer = (props) => {\n    const videoNode = useRef(null);\n\n    const videoJsOptions = {\n        autoplay: false,\n        controls: true,\n        responsive: true,   \n        fill: true,\n        aspectRatio: \"16:9\",\n    };\n\n    useEffect(() => {\n\n        if (!videoNode.current)\n            return;\n\n        // @ts-ignore\n        window.videojs = videojs.default;\n        const newPlayer = videojs(videoNode.current, videoJsOptions, function onPlayerReady() {\n            console.log(\"Player ready\");\n        });\n\n        return () => newPlayer.dispose();\n    }, [props.source]);\n\n    return (\n            <div style={{width: \"100%\"}}>\n                <div className=\"VideoPlayer\">\n                    <div data-vjs-player>\n                        <video ref={videoNode}\n                            className={`video-js vjs-big-play-centered`}>\n                                    <source src={props.source.src} type={props.source.type}></source>\n                        </video>\n                    </div>\n                </div>\n            </div>\n    );\n};\n\nexport default VideoJSPlayer;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nexport const ScionHeader = (props) => {\n\n    const [stats, setStats] = useState();\n\n    useEffect(() => {\n        setTimeout(() => axios.get(\"http://49.12.6.5:81/__stats\").then(res => setStats(res.data)), 1000);\n        setInterval(() => {\n            axios.get(\"http://49.12.6.5:81/__stats\").then(res => setStats(res.data));\n        }, 2000);\n    }, [props.source])\n\n    console.log(stats);\n\n    return (\n        <div>\n            <h1>SCION Video Player</h1> \n            <hr />\n            {\n                stats ? [\n                    <h3>SCION Ingress Proxy: {stats.local}</h3>,\n                    <h3>SCION Egress Proxy: {stats.remote}</h3>,\n                    <h3>Selected Path: {stats.path}</h3>\n                ] : <h3>Loading...</h3>\n            }\n        </div>\n    )\n};","import React, { useState } from 'react';\nimport './App.css';\nimport VideoJSPlayer from './VideoPlayer';\nimport { ScionHeader } from './ScionHeader';\n\nconst sources = [{\n  src: \"http://49.12.6.5:8090/streamwebm\",\n  type: \"video/webm\",\n  label: \"SD\"\n}];\n\nfunction App() {\n\n  const [selectedSource, setSelectedSource] = useState(sources[0]);\n\n  return (\n    <div className=\"App\">\n      <ScionHeader source={selectedSource}/>\n      <VideoJSPlayer source={selectedSource}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}